#include <bits/stdc++.h>

using namespace std;

struct node
{
    int u,v,wt;
    node(int first,int second,int weight)
    {
        u = first;
        v = second;
        wt = weight;
    }
};

bool comp(node a,node b)
{
    return a.wt < b.wt;
}

int findpar(int u,vector<int>&par)
{
    if(u == par[u])
        return u;
    par[u] = findpar(par[u],par);
}

void union_fun(int u,int v,vector<int>&par,vector<int>&sz)
{
    u = findpar(u,par);
    v = findpar(v,par);

    if(sz[u] < sz[v])
        par[u] = v, sz[v] += sz[u];
    else
        par[v] = u, sz[u] += sz[v];

}

int krushkal(vector<int>&par,vector<int>&sz,vector<vector<int> >&mst,vector<node>&edges,int m)
{
    int cost = 0;
    for(int i=0;i<m;i++)
    {
        if(findpar(edges[i].v,par) != findpar(edges[i].u,par))
        {
            vector<int>vt(3);
            cost += edges[i].wt;
            cout<<cost<<endl;
            vt[0] = edges[i].u;
            vt[1] = edges[i].v;
            vt[2] = edges[i].wt;
            mst.push_back(vt);
            union_fun(edges[i].u,edges[i].v,par,sz);
        }
    }
    return cost;
}

int main()
{
    int n,m,i,u,v,wt;
    cin>>n>>m;
    vector<node>edges;
    for(i=0;i<m;i++)
    {
        cin>>u>>v>>wt;
        edges.push_back(node(u,v,wt));
    }
    sort(edges.begin(),edges.end(),comp);
    vector<int>par(n);
    for(i=0;i<n;i++)
        par[i] = i;
    vector<int>sz(n,0);
    int cost = 0;
    vector<vector<int> >mst;
    int cst = krushkal(par,sz,mst,edges,m);
    cout<<cst<<endl;
    for(i=0;i<mst.size();i++)
        cout<<mst[i][0]<<", "<<mst[i][1]<<" -> "<<mst[i][2]<<endl;
}
