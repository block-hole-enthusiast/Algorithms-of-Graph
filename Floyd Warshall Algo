#include <bits/stdc++.h>

using namespace std;

#define INF 99999

int main()
{
	int n,m,i;
	cin>>n>>m;
	int from,to,wt;
	int W[n+1][n+1],k,j;
	for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            if(i == j)
                W[i][j] = 0;
            else
                W[i][j] = INF;
        }
    }
	for(i=0;i<m;i++)
    {
        cin>>from>>to>>wt;
        W[from][to] = wt;
    }

    int d[n+1][n+1],p[n+1][n+1];
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
            {
                d[i][j] = W[i][j];
                if(W[i][j] == 0 || W[i][j] == INF)
                     p[i][j] = INF;
                else
                     p[i][j] = i;
            }
    }


    for(k = 1;k <= n;k++)
    {
        for(i = 1;i <= n;i++)
        {
            for(j = 1;j <= n;j++)
                {
                    if(d[i][j] > d[i][k] + d[k][j])
                    {
                        d[i][j] = d[i][k] + d[k][j];
                        p[i][j] = p[k][j];
                    }
                }
        }
    }

    //Printing Final Distance Table
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            if(d[i][j] == INF)
                 cout<<"INF ";
            else
                 cout<<d[i][j]<<" ";
        }
        cout<<endl;
    }


    //Calculating shortest path
    int src,dst;
    src = 1;
    dst = 4;
    cout<<"Shortest Path: ";
    vector<int>vt;
    i = src;
    j = dst;
    vt.push_back(dst);
    for(;j != src;)
    {
        if(p[i][j] != INF)
           {
               vt.push_back(i);
               j = p[i][j];
           }
    }
    reverse(vt.begin(),vt.end());

    for(i=0;i<vt.size();i++)
         cout<<vt[i]<<" ";
    cout<<endl;

    //Detecting negative edge cycle
    int fl = 0;
    for(i=1;i<=n;i++)
    {
        if(d[i][i] < 0)
        {
            fl = 1;
            break;
        }
    }

    if(fl)
        cout<<"Negative weight cycle is present"<<endl;
    else
        cout<<"Not present."<<endl;

}
